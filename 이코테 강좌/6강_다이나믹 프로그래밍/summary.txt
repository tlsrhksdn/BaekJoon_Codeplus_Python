다이나믹 프로그래밍(동적 계획법)

메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
이미 계산된 결과는 별도의 메모리 영역에 저장해 다시 계산하지 않도록 한다
다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(top-down과 bottom-up)으로 구성된다.

문제가 다음의 조건을 만족할 때 사용한다

1. 최적 부분 구조
큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.
2. 중복되는 부분 문제
동일한 작은 문제를 반복적으로 해결해야 한다.


메모이제이션

한 번 계산한 결과를 메모리 공간에 메모하는 기법

다이나믹 프로그래밍 vs 분할 정복

다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용할 수 있다.

다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복이다.

다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복된다
분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않는다.

다이나믹 프로그래밍 문제에 접근하는 방법

주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요

가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토한다
다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려해본다
일단 재귀함수로 비효율적인 완전 탐색 프로그램을 작성한 후 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면 코드를 개선하는 방법을 사용할 수 있다
일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많다.

