참고 블로그: https://medium.com/@dltkddud4403/python-%EC%88%9C%EC%97%B4-%EC%A1%B0%ED%95%A9-%EA%B5%AC%ED%98%84-5e496e74621c

파이썬 순열, 조합 구현 방법

1. itertools 모듈

# 예제

from itertools import permutations #순열 함수 불러옴
from itertools import combinations # 조합 함수 불러옴

a = []
b = []
items= [1,2,3,4]
for i in list(combinations(items,2)):
    a.append(i)
print(a)

for i in list(permutations(items,2)):
    b.append(i)
print(b)

2. 재귀 함수

다른 언어나 외부 모듈 사용 불가능한 경우/ 공부를 위해 구현해보고 싶은 경우

한 가지 원소를 뽑고 그 원소를 제외한 리스트로 조합 혹은 순열을 구한다.

# 예시
def comb(lst,n):
	ret = []
	if n > len(lst): return ret
	
	if n == 1:
		for i in lst:
			ret.append([i])
	elif n>1:
		for i in range(len(lst)-n+1):
			for temp in comb(lst[i+1:],n-1):
				ret.append([lst[i]]+temp)

	return ret

def perm(lst,n):
	ret = []
	if n > len(lst): return ret

	if n==1:
		for i in lst:
			ret.append([i])
	elif n>1:
		for i in range(len(lst)):
			temp = [i for i in lst]
			temp.remove(lst[i])
			for p in perm(temp,n-1):
				ret.append([lst[i]]+p)

	return ret

3. dfs/bfs

def dfs_comb(lst,n):
	ret = []
	idx = [i for i in range(len(lst))]

	stack  = []
	for i in idx[:len(lst)-n+1]:
		stack.append([i])
	
	while len(stack)!=0:
		cur = stack.pop()

		for i in range(cur[-1]+1,len(lst)-n+1+len(cur)):
			temp=cur+[i]
			if len(temp)==n:
				element = []
				for i in temp:
					element.append(lst[i])
				ret.append(element)
			else:
				stack.append(temp)
	return ret

def dfs_perm(lst,n):
	ret = []
	idx = [i for i in range(len(lst))]

	stack  = []
	for i in idx:
		stack.append([i])
	
	while len(stack)!=0:
		cur = stack.pop()

		for i in idx:
			if i not in cur:
				temp=cur+[i]
				if len(temp)==n: 
					element = []
					for i in temp:
						element.append(lst[i])
					ret.append(element)
				else:
					stack.append(temp)
	return ret

